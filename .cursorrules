# Enforce testing & coverage
- Always run tests with coverage: `PYTEST_DISABLE_PLUGIN_AUTOLOAD=1 coverage run -m pytest -q`
- Enforce 100% coverage for `src/` via `.coveragerc` (`fail_under = 100`)
- Prefer headless plotting (`MPLBACKEND=Agg`) and save outputs to `quadmath/output/`

# Python project structure
- Use `uv` to manage the environment and dependencies; keep `pyproject.toml` authoritative
- Organize modular code under `src/`, tests under `tests/`
- All figures and data artifacts from scripts go to `quadmath/output/` and include lightweight CSV/NPZ alongside PNG/MP4 when feasible

# Code style and conventions
- Write explicit type hints for public APIs; keep local variables unannotated when trivially inferred
- Use descriptive names (no 1–2 character names); follow clean-code naming (functions as verbs, variables as nouns)
- Prefer guard clauses and shallow nesting; handle error/edge cases first
- Keep code comments concise; explain "why" for non-obvious logic; avoid inline explanatory comments inside code blocks
- Maintain consistent formatting; avoid unrelated reformatting in edits
- Use exact integer linear algebra for determinants over integer inputs (Bareiss algorithm) and cite algorithms when referenced in docs

# Imports and paths
- Source code imports assume `src/` on `PYTHONPATH`; prefer absolute imports like `from quadray import Quadray`
- Avoid circular imports; factor shared utilities into modules under `src/`

# Plotting and reproducibility
- Use headless Matplotlib (`Agg`) in scripts/tests; never display interactive windows in CI
- Save figures with tight layout, include axis labels/titles, and deterministic RNG seeds for reproducibility
- Where applicable, save raw data used to produce figures to `quadmath/output/` (CSV and/or NPZ)

# Documentation and references
- Place manuscript content in `quadmath/markdown/`; keep section files cohesive and moderately scoped
- Use descriptive Markdown links for all scientific and code claims (no bare URLs). Prefer canonical references:
  - Geometry: Cayley–Menger, tetrahedron volume
  - Optimization: Nelder–Mead
  - Information geometry: Fisher information, natural gradient
  - Active Inference: free energy principle, recent reviews
  - Tooling: GCC libquadmath
- When referencing code, point to function names and modules under `src/` using inline code formatting (e.g., `integer_tetra_volume` in `quadray.py`)
- Figures in docs should refer to files under `quadmath/output/` and be generated by scripts in `quadmath/scripts/`

# Testing methodology
- Follow TDD: write/adjust tests under `tests/` before or alongside code changes
- Avoid mocks; prefer small, real numerical examples and deterministic RNG seeds
- Keep tests fast and hermetic; no network or file-system writes outside `quadmath/output/`

# Commit and PR hygiene
- One logical change per commit; summarize intent and impact in the commit message subject line
- Include brief notes about tests added/updated and any figures regenerated

